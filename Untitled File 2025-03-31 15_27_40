import json
import pandas as pd
from config import *
import re
import json
import pandas as pd


def safe_json_parse(response_str: str) -> dict:
    """
    Parses model output that may include markdown-style code fences or extra escape characters.
    Returns a dictionary with disney_movie, concise_reasoning, and es_LA.
    """
    # Step 1: Remove Markdown-style code fences
    cleaned = re.sub(r"^```(?:json)?\s*|\s*```$", "", response_str.strip(), flags=re.IGNORECASE)

    # Step 2: Fix overly escaped quotes if needed (optional for extra safety)
    if isinstance(cleaned, str):
        cleaned = cleaned.replace('\\"', '"')  # unescape any escaped quotes
        cleaned = cleaned.replace("\\'", "'")  # unescape any single quotes

    try:
        return json.loads(cleaned)
    except json.JSONDecodeError as e:
        return {
            "disney_movie": "ParseError",
            "concise_reasoning": f"Could not parse JSON: {str(e)}",
            "es_LA": cleaned  # Preserve raw output for debugging
        }

def convert_df_to_jsonl(df: pd.DataFrame, output_path: str, system_prompt: str) -> None:
    """
    Converts a pandas DataFrame into a .jsonl file formatted for OpenAI batch chat API.
    Each line contains a 'messages' array with a system prompt and a user message built from the row.
    
    Args:
        df (pd.DataFrame): Input dataframe with columns including 'type', 'feature name/content type', 'KEY', and 'en'.
        output_path (str): Path to save the resulting .jsonl file.
        system_prompt (str): The system prompt to use in each message array.
    """
    with open(output_path, 'w', encoding='utf-8') as f:
        for i, row in df.iterrows():
            user_message = {
                "type": row["Type"],
                "feature name/content type": row["Feature name / Content type"],
                "KEY": row["KEY"],
                "en": row["en"]
            }
            record = {
                "custom_id": f"row_{i}",
                "method":"POST",
                "url": "/v1/chat/completions", 
                "body": {"model": MODEL,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": json.dumps(user_message)}
                    ]
                }
            }
            f.write(json.dumps(record, ensure_ascii=False) + "\n")
